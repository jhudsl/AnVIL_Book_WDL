[["index.html", "WDL Workflows Overview Skills Level Learning Objectives AnVIL Collection", " WDL Workflows September 22, 2022 Overview This book introduces WDL Workflows on AnVIL. After introducing several concepts, including basic WDL syntax, we present hands-on exercises to run a workflow, write a WDL, localize a file, customize a Docker image, and join the Discourse. No local software installation is required as each exercise leverages web-based resources. Skills Level Genetics Novice: No genetics knowledge needed Programming skills Novice: No programming experience needed Learning Objectives Understand when WDL Workflows are the right tool Run a Workflow on AnVIL Write a WDL using Broad Methods Repository Bring your own data to analyze Customize your Docker environment Join the conversation AnVIL Collection Please check out our full collection of AnVIL resources below! Book Name Description Topics AnVIL Phylogenetic-Techniques (github) A semester-long course on the basics of molecular phylogenetic techniques anvil AnVIL: Getting Started (github) A guide for getting started using AnVIL anvil, cloud-computing AnVIL: Instructor Guide (github) A guide for instructors using AnVIL for workshops, lessons, or courses. anvil, education GDSCN: SARS Galaxy on AnVIL (github) Lab module and lectures for variant detection in SARS-CoV-2 using Galaxy anvil, genomics, module GDSCN: Statistics for Genomics Differential Expression (github) A set of lab modules for an introduction to differential gene expression anvil, cloud-computing, gene-expression GDSCN: Statistics for Genomics PCA (github) A set of lab modules for PCA analysis anvil GDSCN: Statistics for Genomics RNA-seq (github) A set of lab modules for RNA-seq analysis anvil GDSCN: Statistics for Genomics scRNA-seq (github) A set of lab modules for single cell RNA-seq analysis anvil "],["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction This lecture module introduces several basic concepts when working with WDL Workflows. It highlights several considerations when using Docker container technology and provides an overview of the main sections in an example WDL workflow. These slides are adapted from the WDL 101 Workshop. More information can be found in this presentation hosted by Bioinformática UFMG. Learning Objectives Four parts of WDL Workflows on Terra How Docker improves reproducibility Overview of basic WDL syntax Find and configure Workflows You can view and download the Google Slides here. "],["run-workflow.html", "Chapter 2 Run Workflow", " Chapter 2 Run Workflow This tutorial demonstrates how to run a WDL Workflow on AnVIL. It uses the fun and accessible WDL puzzles workspace to run a “Hello, World!” style workflow. By showcasing how input parameters are specified and where output files can be found, this exercise helps provide context before writing your own WDL Workflow. Learning Objectives Import WDL by cloning a Workspace Run Workflow using AnVIL Examine Output to appreciate data flow You can view and download the Google Slides here. "],["write-wdl.html", "Chapter 3 Write WDL 3.1 Access Broad Methods Repository 3.2 Write WDL101 Training Example 3.3 Export to AnVIL and run", " Chapter 3 Write WDL Now that you’ve successfully run a Workflow on AnVIL, this tutorial demonstrates how you can create and edit a WDL using the Broad Methods Repository. While this “legacy” Methods repository does not have many of the features present in the open-source Dockstore platform, it does offer a convenient web-based editor for demonstration purposes. This material is adapted from the WDL 101 Workshop; you can read about other ways the Broad Methods Repository can be used in this Terra Support article. Learning Objectives Access Broad Methods Repository Write WDL101 Training Example Export to Terra and run 3.1 Access Broad Methods Repository Let’s start by navigating to the WDL-puzzles workspace that we previously cloned. Please double check your workspace name to ensure that this is the copy that you made rather than the original as you will not be able to use the original workspace to create a new WDL or run a workflow. Once you’ve double checked that you are in a workspace that you can modify and compute, click on the Workflows tab. Click on the Find a Workflow card. Select the Broad Methods Repository option. Click Create New Method. Add a namespace to the first text box to organize your WDLs. Your username (prepended with your lab name) is a reasonable namespace as this must be unique across all of Broad Methods Repository. Afterwards, add a name such as wdl101 to name your WDL. 3.2 Write WDL101 Training Example Let’s now create a basic WDL! This simple “Hello, World!” style workflow will take as input a string, call a single task, and save the output of that task to your workspace bucket. The task that is called will run the Bash echo command to print the input string to stdout. First note that we are using the WDL 1.0 spec. version 1.0 Let’s add a workflow HelloInput that calls a single task WriteGreeting. version 1.0 workflow HelloInput { } task WriteGreeting{ } To create the task, we will define input, command, output, and runtime blocks. Note that the command block is defined as a “here doc” and prints the input string to stdout. version 1.0 workflow HelloInput { } task WriteGreeting { input { String name_for_greeting } command &lt;&lt;&lt; echo &#39;hello ~{name_for_greeting}!&#39; &gt;&gt;&gt; output { File Greeting_output = stdout() } runtime { docker: &#39;ubuntu:latest&#39; } } Putting it all together, we now create the workflow by defining an input string stored in a variable named name_input, calling the task by passing name_input to name_for_greeting, and storing what is returned by the task in a File labeled final_output. version 1.0 workflow HelloInput { input { String name_input } call WriteGreeting { input: name_for_greeting = name_input } output { File final_output = WriteGreeting.Greeting_output } } task WriteGreeting { input { String name_for_greeting } command &lt;&lt;&lt; echo &#39;hello ~{name_for_greeting}!&#39; &gt;&gt;&gt; output { File Greeting_output = stdout() } runtime { docker: &#39;ubuntu:latest&#39; } } 3.3 Export to AnVIL and run Once your WDL is complete, click on Upload. Now click on Export to Workspace. Select Use Blank Configuration. Select a Destination Workspace such as your clone of WDL-puzzles. Afterwards, click Export to Workspace. Lastly, configure your Workflow as your did previously (e.g. inputs defined by file paths, name in double quotes), click Save, and then click Run Analysis. Voila! Here’s what you hopefully see after successfully running your WDL101 Training Example ! "],["localize-files.html", "Chapter 4 Localize Files", " Chapter 4 Localize Files "],["customize-docker.html", "Chapter 5 Customize Docker", " Chapter 5 Customize Docker "],["join-discourse.html", "Chapter 6 Join Discourse", " Chapter 6 Join Discourse "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor(s) FirstName LastName Lecturer(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved Delivered the course in some way - video or audio Content Author(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved If any other authors besides lead instructor Content Contributor(s) (include section name/link in parentheses) - make new line if more than one section involved Wrote less than a chapter Content Editor(s)/Reviewer(s) Checked your content Content Director(s) Helped guide the content direction Content Consultants (include chapter name/link in parentheses or word “General”) - make new line if more than one chapter involved Gave high level advice on content Acknowledgments Gave small assistance to content but not to the level of consulting Production Content Publisher(s) Helped with publishing platform Content Publishing Reviewer(s) Reviewed overall content and aesthetics on publishing platform Technical Course Publishing Engineer(s) Helped with the code for the technical aspects related to the specific course generation Template Publishing Engineers Candace Savonen, Carrie Wright Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Candace Savonen Package Developers (Leanbuild) John Muschelli, Candace Savonen, Carrie Wright Art and Design Illustrator(s) Created graphics for the course Figure Artist(s) Created figures/plots for course Videographer(s) Filmed videos Videography Editor(s) Edited film Audiographer(s) Recorded audio Audiography Editor(s) Edited audio recordings Funding Funder(s) Institution/individual who funded course including grant number Funding Staff Staff members who help with funding   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.3 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2022-09-22 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.3) ## bookdown 0.24 2022-02-15 [1] Github (rstudio/bookdown@88bc4ea) ## callr 3.4.4 2020-09-07 [1] RSPM (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] RSPM (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [1] RSPM (R 4.0.3) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] RSPM (R 4.0.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## knitr 1.33 2022-02-15 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## magrittr 2.0.2 2022-01-26 [1] CRAN (R 4.0.2) ## memoise 1.1.0 2017-04-21 [1] RSPM (R 4.0.0) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.3.4 2020-08-11 [1] RSPM (R 4.0.2) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.0.3) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 0.4.10 2022-02-15 [1] Github (r-lib/rlang@f0c9be5) ## rmarkdown 2.10 2022-02-15 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2022-02-15 [1] Github (R-lib/testthat@e99155a) ## usethis 2.1.5.9000 2022-02-15 [1] Github (r-lib/usethis@57b109a) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2022-02-15 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
